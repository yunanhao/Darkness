package demo.util;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class ImageHelper {
    /**
     * FACTOR = 0.7
     *
     * @param pixel  像素点的ARGB
     * @param factor FACTOR = 0.7
     */
    public static int changeColor(int pixel, double factor) {
        int r = pixel >> 16 & 0xFF;
        int g = pixel >> 8 & 0xFF;
        int b = pixel & 0xFF;
        int a = pixel >> 24 & 0xff;
        int i = (int) (1.0 / (1.0 - factor));
        if (r == 0 && g == 0 && b == 0) {
            pixel = (a & 0xFF) << 24 | (i & 0xFF) << 16 | (i & 0xFF) << 8 | (i & 0xFF) << 0;
        } else {
            if (r > 0 && r < i) {
                r = i;
            }
            if (g > 0 && g < i) {
                g = i;
            }
            if (b > 0 && b < i) {
                b = i;
            }
            pixel = (a & 0xFF) << 24 | (Math.min((int) (r / factor), 255) & 0xFF) << 16 | (Math.min((int) (g / factor), 255)
                    & 0xFF) << 8 | (Math.min((int) (b / factor), 255) & 0xFF) << 0;
        }
        return pixel;
    }

    /**
     * 亮度公式是 Brightness = 0.3 * R + 0.6 * G + 0.1 * B，
     * RGB计算色彩知觉亮度的公式
     * Y = ((R*299)+(G*587)+(B*114))/1000
     * 灰度
     * Gray = (R*299 + G*587 + B*114 + 500) / 1000
     *
     * @param pixel  像素点的ARGB
     * @param factor FACTOR = 0.7
     * @param flag   标识
     */
    public static int changeColor(int pixel, double factor, int flag) {
        int r = pixel >> 16 & 0xFF;
        int g = pixel >> 8 & 0xFF;
        int b = pixel & 0xFF;
        int a = pixel >> 24 & 0xff;
        if (flag == 0) {//原像素
            return pixel;
        }
        if (flag == 1) {//R通道
            return (a & 0xFF) << 24 | (r & 0xFF) << 16 | (r & 0xFF) << 8 | (r & 0xFF);
        }
        if (flag == 2) {//G通道
            return (a & 0xFF) << 24 | (g & 0xFF) << 16 | (g & 0xFF) << 8 | (g & 0xFF);
        }
        if (flag == 3) {//B通道
            return (a & 0xFF) << 24 | (b & 0xFF) << 16 | (b & 0xFF) << 8 | (b & 0xFF);
        }
        int i = (int) (1.0 / (1.0 - factor));
        if (r == 0 && g == 0 && b == 0) {
            pixel = (a & 0xFF) << 24 | (i & 0xFF) << 16 | (i & 0xFF) << 8 | (i & 0xFF);
        } else {
            if (r > 0 && r < i) {
                r = i;
            }
            if (g > 0 && g < i) {
                g = i;
            }
            if (b > 0 && b < i) {
                b = i;
            }
            pixel = (a & 0xFF) << 24 | (Math.min((int) (r / factor), 255) & 0xFF) << 16 | (Math.min((int) (g / factor), 255)
                    & 0xFF) << 8 | (Math.min((int) (b / factor), 255) & 0xFF);
        }
        return pixel;
    }

    /**
     *
     */
    public static int changeColor(int pixel) {
        int r = pixel >> 16 & 0xFF;
        int g = pixel >> 8 & 0xFF;
        int b = pixel & 0xFF;
        int a = (int) (0.21f * r + 0.71f * g + 0.08f * b);// 获取亮度
        pixel = (a & 0xFF) << 24 | (r & 0xFF) << 16 | (g & 0xFF) << 8 | (b & 0xFF);
        return pixel;
    }

    public static byte[] imageToPNG(BufferedImage image) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            BufferedImage buffer = new BufferedImage(image.getWidth(null), image.getHeight(null),
                    BufferedImage.TYPE_INT_ARGB);

            buffer.createGraphics().drawImage(image, 0, 0, null);
            ImageIO.write(buffer, "PNG", baos);
            baos.close();
        } catch (IOException e) {
            // todo: log this instead
            e.printStackTrace();
        }

        return baos.toByteArray();
    }

    public static BufferedImage bytesToImage(byte[] imageData) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image toolkitImage = toolkit.createImage(imageData);
        int width = toolkitImage.getWidth(null);
        int height = toolkitImage.getHeight(null);

        toolkitImage = toolkitImage.getScaledInstance(width, height, Image.SCALE_FAST);

        BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.getGraphics();
        g.drawImage(toolkitImage, 0, 0, null);
        g.dispose();

        return img;
    }

    /**
     * 将图片素材切分成小图块
     *
     * @param tilecount
     */
    public static final BufferedImage[] splitImage(int w, int h, int tilecount, Image... image) {
        BufferedImage[] result = new BufferedImage[tilecount + 1];
        Graphics2D g;
        result[0] = new BufferedImage(w, h, BufferedImage.TYPE_4BYTE_ABGR);
        for (int i = 0, x, y, column, row, count = 1; i < image.length; i++) {
            column = image[i].getWidth(null) / w;
            row = image[i].getHeight(null) / h;
            for (y = 0; y < row; y++) {
                for (x = 0; x < column; x++, count++) {
                    result[count] = new BufferedImage(w, h, BufferedImage.TYPE_4BYTE_ABGR_PRE);
                    g = result[count].createGraphics();
                    g.drawImage(image[i], 0, 0, w, h, w * x, h * y, w * x + w, h * y + h, null);
                    g.dispose();
                }
            }
        }
        return result;
    }

    /**
     * 将源图像由方变圆
     *
     * @param image 源图像
     */
    public static final BufferedImage getRoundImage(final Image image) {
        return getRoundImage(image, image.getWidth(null), image.getHeight(null), 0, 0, image.getWidth(null), image
                .getHeight(null));
    }

    /**
     * 获取指定大小圆的图像
     *
     * @param image  源图像
     * @param width  结果图像的宽度
     * @param height 结果图像的高度
     * @param startX 源图像的起始横坐标
     * @param startY 源图像的起始纵坐标
     * @param endX   源图像的结束横坐标
     * @param endY   源图像的结束纵坐标
     */
    public static final BufferedImage getRoundImage(final Image image, final double width, final double height,
                                                    final int startX, final int startY, final int endX, final int endY) {
        final Ellipse2D.Double round = new Ellipse2D.Double(0, 0, width, height);
        final BufferedImage roundImage = new BufferedImage((int) width, (int) height, BufferedImage.TYPE_4BYTE_ABGR_PRE);
        final Graphics2D g2d = roundImage.createGraphics();
        g2d.setClip(round);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.drawImage(image, 0, 0, (int) width, (int) height, startX, startY, endX, endY, null);
        g2d.dispose();
        return roundImage;
    }

    /**
     * 获取一张可指定大小的边框图像
     *
     * @param source 用于放大的.9png源图像
     * @param width  要获取的图像的宽度
     * @param height 要获取的图像的高度
     * @param span_L 源图像左边距
     * @param span_U 源图像上边距
     * @param span_R 源图像右边距
     * @param span_D 源图像下边距
     */
    public static final BufferedImage getNinePNG(final Image source, final int width, final int height, final int span_L,
                                                 final int span_U, final int span_R, final int span_D) {
        return getNinePNG(source, new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR_PRE), span_L, span_U,
                span_R, span_D);
    }

    /**
     * 获取一张可以缩放(最好用于放大)图像
     *
     * @param source 用于放大的.9png源图像
     * @param target 用来返回绘制完成的图像
     * @param span_L 源图像左边距
     * @param span_U 源图像上边距
     * @param span_R 源图像右边距
     * @param span_D 源图像下边距
     */
    public static final BufferedImage getNinePNG(final Image source, final Image target, final int span_L,
                                                 final int span_U, final int span_R, final int span_D) {
        final Graphics g = target.getGraphics();
        final int target_w = target.getWidth(null);
        final int target_h = target.getHeight(null);
        final int image_w = source.getWidth(null);
        final int image_h = source.getHeight(null);
        // 左上角
        g.drawImage(source, 0, 0, span_L, span_U, 0, 0, span_L, span_U, null);
        // 上边
        g.drawImage(source, span_L, 0, target_w - span_R, 0 + span_U, span_L, 0, image_w - span_R, span_U, null);
        // 右上角
        g.drawImage(source, target_w - span_R, 0, target_w, 0 + span_U, image_w - span_R, 0, image_w, span_U, null);
        // 左边
        g.drawImage(source, 0, span_U, span_L, 0 + target_h - span_D, 0, span_U, span_L, image_h - span_D, null);
        // 中间
        g.drawImage(source, span_L, span_U, target_w - span_R, target_h - span_D, span_L, span_U, image_w - span_R, image_h
                - span_D, null);
        // 右边
        g.drawImage(source, target_w - span_R, span_U, target_w, target_h - span_D, image_w - span_R, span_U, image_w,
                image_h - span_D, null);
        // 左下角
        g.drawImage(source, 0, target_h - span_D, span_L, target_h, 0, image_h - span_D, span_L, image_h, null);
        // 下边
        g.drawImage(source, span_L, target_h - span_D, 0 + target_w - span_R, target_h, span_L, image_h - span_D, image_w
                - span_R, image_h, null);
        // 右下角
        g.drawImage(source, target_w - span_R, target_h - span_D, target_w, target_h, image_w - span_R, image_h - span_D,
                image_w, image_h, null);
        g.dispose();
        return (BufferedImage) target;
    }

    /**
     * 缩放图片中的各个部分
     */
    public static final BufferedImage zoomImage(Image source, int width, int height, int twidth, int theight, int xspace,
                                                int yspace, int xmargin, int ymargin) {
        int sx = source.getWidth(null) / width;
        int sy = source.getHeight(null) / height;
        int imgW = (twidth + xspace) * sx - xspace + xmargin * 2;
        int imgH = (theight + yspace) * sy - yspace + ymargin * 2;
        BufferedImage copy = new BufferedImage(imgW, imgH, BufferedImage.TYPE_4BYTE_ABGR);
        Graphics2D g2d = copy.createGraphics();
        int dx1, dy1, dx2, dy2;
        int sx1, sy1, sx2, sy2;
        for (int x = 0; x <= sx; x++) {
            for (int y = 0; y <= sy; y++) {
                dx1 = xmargin + x * (twidth + xspace);
                dy1 = ymargin + y * (theight + yspace);
                dx2 = dx1 + twidth;
                dy2 = dy1 + theight;
                sx1 = x * width;
                sy1 = y * height;
                sx2 = sx1 + width;
                sy2 = sy1 + height;
                g2d.drawImage(source, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, null);
            }
        }
        g2d.dispose();
        return copy;
    }

    public static void main(String[] args) {
        int[][] ARGB = {{0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 129, 33554687, 8127, 4, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 33554560, 33686484, 54885869, 50472901, 34949886, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 33554625, 72915412, 530162615, 195671500,
                36854456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 50331860, 90738382,
                513319606, 203570807, 57051102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 2, 2,
                2, 50331860, 102778544, 530688958, 227124690, 57177300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0,
                0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 50331860, 102712237, 514108864, 228111570, 57506260, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 50331860, 104816832, 513516725,
                227782104, 57965782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1, 50333384, 121005498, 563916220, 225884385, 56666345, 7943, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50358784, 118190491, 563066572,
                289776342, 70102527, 33554559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0,
                0, 0, 0, 65536, 65536, 0, 50358784, 119183034, 663203268, 289189336, 69917951,
                33554559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 50358528, 136621526, 680374984, 439722710, 70513662, 33554534, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 65536, 65536, 0,
                50358784, 136219056, 696757441, 322743516, 86754047, 34278232, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 65536, 65536,
                0, 50356992, 136483756, 748338642, 473863612, 85380092, 41516159,
                789516, 789516, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 67132928, 151028904, 765312979, 474654667,
                102217182, 37707647, 41910143, 44476070, 0, 0, 0, 0, 0, 0, 0,
                0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 65536, 65536, 0, 67133184,
                151421860, 866239190, 491431367, 102077927, 54484863,
                41910143, 47107790, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
                0, 0, 0, 0, 0, 0, 65536, 65536, 0, 67129149,
                169903286, 865382595, 509786338, 120108286, 52970607,
                41910143, 45594551, 33554432, 0, 0, 0, 0, 0, 0, 0,
                0}, {0, 0, 0, 0, 0, 0, 0, 0, 65536, 65536, 2,
                67133182, 186414065, 1032957130, 559653612,
                121478905, 51982949, 41910143, 45134000, 16777216,
                0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0,
                0, 131073, 65537, 65795, 67133439, 186542567,
                1049997263, 577218544, 138979837, 51983206,
                41383799, 45462965, 0, 0, 0, 0, 0, 0, 0, 0,
                0}, {0, 0, 0, 0, 0, 0, 0, 0, 65537, 65793,
                259, 67136511, 203848168, 1184017868,
                594191848, 154966522, 51982430, 18290455,
                21382726, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 2,
                83926015, 203526899, 1200203972,
                645053174, 155493874, 53889910,
                2434341, 65793, 0, 0, 0, 0, 0, 0, 0,
                0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0,
                256, 1803, 83927030, 219975646,
                1217311438, 661501161, 171749623,
                71004046, 81517531, 0, 65793, 0,
                0, 0, 0, 0, 0, 0, 0}, {0, 0, 0,
                0, 0, 0, 0, 0, 256, 256,
                100667413, 83927531,
                237151445, 1334818509,
                763480299, 189116400,
                85605976, 297976514, 36251945,
                2105376, 0, 0, 0, 0, 0, 0, 0,
                0}, {0, 0, 0, 0, 0, 0, 0, 0,
                256, 256, 258, 83920635,
                253405153, 1351661516,
                795585744, 206157039,
                85214040, 316003797,
                58687359, 2763306, 0, 0,
                0, 0, 0, 0, 0, 0}, {0,
                0, 0, 0, 0, 0, 0, 0,
                256, 256, 724225,
                102146800, 269917146,
                1536014554, 914470631,
                222733553, 102057578,
                416076508, 57637253,
                34873146, 0, 0, 0, 0,
                0, 0, 0, 0}, {0, 0,
                0, 0, 0, 0, 0, 0,
                1024, 512,
                46221056,
                108568750,
                302495999,
                1635104756,
                980854773,
                240879870,
                106260389,
                478520286,
                54226880,
                33570772, 2, 2, 2,
                2, 0, 0, 0, 0}, {
                0, 0, 0, 0, 0,
                0, 0, 0, 1024,
                5724160,
                67065600,
                140028067,
                336644095,
                1752809460,
                996713969,
                274506236,
                121663680,
                465031158,
                51199146,
                33570780, 2,
                2, 2, 2, 0, 0,
                0, 0}, {0,
                0, 0, 0,
                0, 0, 0,
                0, 770,
                40792832,
                81743363,
                190358958,
                403619071,
                1919991797,
                1063562994,
                308131839,
                140745957,
                449303531,
                50335137,
                33567718,
                2, 2, 2,
                2, 0, 0,
                0, 0}, {
                0, 0,
                0, 0,
                0, 0,
                0, 0,
                516,
                53689114,
                130970685,
                494711487,
                726187003,
                2020130293,
                1214034673,
                576698867,
                156602311,
                363771846,
                50991003,
                2047961,
                1, 1,
                1, 1,
                0, 0,
                0,
                0}, {
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                262,
                56497574,
                162751048,
                560571848,
                927512059,
                -2141078031,
                1364506354,
                591969016,
                203975072,
                279161787,
                55212763,
                34416895,
                2,
                2,
                2,
                2,
                0,
                0,
                0,
                0},
                {0, 0, 0, 0, 0, 0, 0, 1, 7, 58209010, 180909450, 728736971, 1028044280, -1990410511, 1464908790, 691781114,
                        223910862, 312782529, 72976600, 37720544, 2, 2, 2, 2, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 9, 73205999,
                213942452, 930194381, 1195487475, -1923235084, 1531821043, 741851383, 258123471, 330677969, 71522234,
                37715924, 1, 1, 1, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 36251945, 921102, 1, 262, 70915716, 225017506,
                1197650397, 1245886204, -1839678732, 1582612215, 809352695, 389525727, 345950184, 72042344, 42754424,
                1, 2, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 33554432, 95399855, 1052688, 65793, 512, 67147264, 234922858,
                1313655033, 1346093055, -1688749831, 1734392056, 877508346, 588500735, 292017147, 93274896,
                50266112, 65536, 289, 8228446, 8257536, 0, 0, 0, 0}, {0, 0, 0, 0, 39738974, 162113961, 39738974,
                6184511, 66304, 68126208, 251697270, 1498335476, 1430174204, -1470449162, 1868806645,
                1044950775, 823969022, 273861117, 93217039, 27394048, 131072, 33562590, 42900586, 50218766,
                3080192, 0, 0, 0}, {0, 0, 0, 33554432, 54483519, 332518612, 58296188, 37706271, 66304,
                71278336, 251696807, 1514389751, 1715319804, -1319387657, 2036381680, 1128312819,
                1026801407, 239188991, 93159463, 8585216, 21053504, 33578495, 364953788, 50299203,
                20905984, 0, 0, 0}, {256, 256, 256, 4352, 54632544, 364957894, 75350683, 35756609,
                6381920, 71267885, 268473572, 1446032636, 1765913334, -1252409350, -2074232850,
                1228385774, 1278586618, 255503871, 92439386, 10682368, 44733857, 67156223, 479574982,
                65438315, 35913728, 0, 0, 0}, {256, 256, 256, 3840, 57196415, 309760631, 124952460,
                57714582, 18693089, 88165342, 285244664, 1411428350, 2017768697, -1152337415,
                -1906853649, 1378855400, 1479844593, 288735231, 107905665, 47595264, 52922559,
                83916287, 444051932, 73818726, 33554432, 0, 0, 0}, {0, 0, 0, 0, 50967399,
                173576306, 294631341, 84964743, 68562430, 119825918, 402812632, 1360440318,
                -2042449417, -917653256, -1672496915, 1545972714, 1681170669, 337685246,
                102193326, 36521304, 67140350, 185907453, 392345064, 73700575, 33554455, 0, 0,
                0}, {256, 256, 256, 256, 50365741, 136085598, 613658792, 222989214,
                169885399, 288189437, 688614613, 1393796863, -1891454474, -850478086,
                -1521699091, 1663085288, 1883087852, 554402793, 168052899, 104562118,
                134249457, 606452206, 221624047, 69635834, 118, 0, 0, 0}, {256, 0,
                65536, 65536, 55674063, 137799092, 895466451, 339053480, 554978502,
                522013924, 873686478, 1561303802, -1555909896, -649085700,
                -1269909779, 1931258597, 1983294702, 704741111, 487928496, 288514515,
                235042520, 875405521, 169126887, 67147725, 4698, 0, 0, 0}, {0,
                131072, 262144, 262146, 56559870, 134263038, 790215146, 538617812,
                738287342, 689589746, 1176332765, 1711576308, -1170229509,
                -481182210, -1051411468, 2065215460, 2065871851, 855666942,
                657862131, 589385971, 604012230, 925146280, 167816344, 50396750,
                16128, 0, 0, 0}, {256, 131072, 262144, 23658600, 56958975,
                234925049, 587765476, 925408715, 1023436529, 890131690,
                1427204065, 1862307062, -867977218, -379928321, -866534411,
                -1910658848, 2032446953, 1124167931, 791033846, 890261477,
                939884226, 891458740, 167814356, 50391278, 11303, 0, 0, 0}, {
                512, 0, 2818088, 48038119, 101911039, 520117735,
                587234268, 1497080287, 1157788916, 1174494446, 1594192632,
                2080411384, -649545474, -228408833, -664551688,
                -1658148380, 2116528110, 1275097855, 1108232442,
                1057119722, 1376682442, 672240600, 268458957, 67138815,
                16782698, 0, 0, 0}, {512, 0, 41484415, 75759871,
                353179373, 553864175, 704669155, 1663409133,
                1209304819, 1275096819, 1862302201, -1962897673,
                -464930563, -177421315, -479280132, -1288196887,
                2133566966, 1409315069, 1207982079, 1325427692,
                1712686544, 621511929, 537219039, 117450988, 50334823,
                0, 0, 0}, {768, 5632, 52887721, 120062206,
                521545186, 788743914, 939545819, 1393265404,
                1596298732, 1644198905, 2013298428, -1778281224,
                -330450693, -126236674, -310654468, -985157137,
                2100011260, 1677751804, 1493198585, 1577091309,
                1645709786, 889219824, 588400370, 369176545,
                67507295, 33554432, 0, 0}, {1024, 33579008,
                68354267, 388368346, 538520559, 855653351,
                1090541292, 1241542902, -2128503829,
                1946387700, -2063563009, -1475963148,
                -212550920, -58208513, -209203459, -564676623,
                -2043764483, 1795193851, 1644196084,
                2030668774, 1343329517, 1023826667, 655308282,
                487142895, 103167323, 35133464, 0, 0}, {
                1024, 33592064, 101910210, 522721985,
                689517541, 872496105, 1107319293,
                1291873016, -1877567249, -2129292302,
                -1828680709, -1206739469, -262291208,
                -23734017, -107751426, -311967240,
                -1876190216, 2046982646, 2030142452,
                -1743283741, 1174572792, 1006983151,
                790050034, 521157362, 222054763, 52371231,
                0, 0}, {768, 50366749, 119025871,
                538258905, 689191659, 973226737,
                1107316216, 1426153716, 1979877109,
                -1825135117, -1643999252, -954030609,
                -160972299, -5774850, -39723522,
                -159986948, -1692426762, -2080275465,
                -1895264531, -1860002070, 1308654585,
                1057051623, 723140079, 571224303,
                287519899, 68164574, 152, 256}, {
                1507328, 53936217, 185027315,
                553727442, 889275110, 973096701,
                1157645309, 1510232821,
                1795192317, -1002984202,
                -1424711965, -718164502,
                -126564877, -4724481, -22027522,
                -159264515, -1525373702,
                -1795124230, -1407280661,
                1780258553, 1291874036,
                1073763558, 823018218, 588589297,
                402792933, 67112447, 33568511,
                512}, {34144256, 84480683,
                469774260, 570572245,
                872431587, 1023427832,
                1174422524, 1409503733,
                1795192319, -1441228550,
                -1153650710, -549342226,
                -108933897, -4331265,
                -21436161, -175845122,
                -1424580105, -1374642955,
                -1086609166, 1628016126,
                1358981361, 1090541041,
                957169892, 588590834,
                436677866, 83890943, 33570815,
                256}, {33554569, 100670706,
                520172975, 671369950,
                1006650603, 1090537981,
                1342195446, 1543787770,
                1912892667, -2096396305,
                -564806152, -413811214,
                -57682949, -4003329,
                -4133889, -293220615,
                -1205164044, -868701194,
                -1556369927, 1744863480,
                1358980078, 1073761770,
                873284852, 638989043,
                521155564, 100669680,
                33566207, 14336}, {
                50338046, 151014135,
                536885185, 771967461,
                1023494124,
                1107315196,
                1409370359,
                1611093239,
                1979868401,
                -2012513053,
                -532761866,
                -210382597, -23340034,
                -3477762, -3739906,
                -427241741,
                -783633420,
                -413352708,
                1964479478,
                1694530549,
                1493196261,
                1174424303,
                1007108340, 722613245,
                521286370, 184751074,
                50340606, 16384}, {
                50341631,
                251674606,
                536884164,
                822231259,
                1040337391,
                1124092152,
                1526942197,
                1661621240,
                2013618678,
                -1827636249,
                -1491561243,
                -42346497,
                -5708289,
                -3280898,
                -3411714,
                -258747148,
                -294795780,
                -1051543044,
                -2113632529,
                1728082157,
                1442865648,
                1124093173,
                1057505534,
                688665850,
                588789745,
                403382988,
                67111935,
                16803072}, {
                67109119,
                251671534,
                553661381,
                839008477,
                1023625972,
                1191200505,
                1443187707,
                1712018165,
                1963285497,
                -1928761115,
                -1575710744,
                -565593094,
                -5116417,
                -2820866,
                -3477764,
                -123938057,
                -42020609,
                -1892833542,
                2097183204,
                1694525414,
                1526751217,
                1207979253,
                1074282492,
                856176383,
                706294757,
                470491070,
                83888632,
                33577249}, {
                50331902,
                251668468,
                536949954,
                839270614,
                1040467183,
                1174422269,
                1510295801,
                1695174647,
                1963416572,
                -1996001037,
                -1710848536,
                -1440505875,
                -125316359,
                -2098178,
                -3280900,
                -22748677,
                -1370836231,
                -1777235482,
                2080668647,
                1795189223,
                1560304622,
                1224755447,
                1074021118,
                990065914,
                756692195,
                504506056,
                100670449,
                33570634},
                {57147629, 135992305, 537866418, 739197921, 1057112295, 1124091129, 1426148345, 1577340921, 1946377724,
                        2063624690, -1912570904, -1576038677, -1438735641, -713110536, -191832321, -1135099655, -1490906643,
                        -1878228241, 2013295080, 1728079595, 1543527148, 1275087607, 1073758202, 771832831, 673592812, 504701899,
                        100667898, 33556206}, {63570033, 144247036, 538585006, 739196385, 905987053, 1090537209, 1409306359,
                1543523311, 1694522878, 1962961141, -2113900306, -1895466006, -1609659923, -1441295121, -1525244681,
                -1660250377, -1878163208, -2013105420, 1962962164, 1694523889, 1526748394, 1224756470, 1073757420,
                856111605, 573389799, 320612062, 83886335, 33554687}, {42008586, 87949783, 505030881, 587609306,
                805322230, 1056980974, 1124093181, 1375752185, 1577079550, 1812094459, 1996579569, -2130350606,
                -1929021970, -1895662867, -1811841554, -1912569353, 2114089206, 1996515063, 1795187701, 1644190706,
                1476479976, 1124681720, 1074477807, 756300028, 539505616, 353246428, 67109119, 141}, {786432,
                72351995, 201397758, 536881354, 687878885, 956316657, 1090538228, 1258309617, 1510032638,
                1594381310, 1812288757, 1963351023, 2013553392, 2114153202, 2113957363, 2046848244, 1996514296,
                1778408438, 1560304889, 1543523047, 1157711598, 1074545643, 940521710, 655437812, 505424041,
                152642536, 50331902, 77}, {65536, 34013319, 83892991, 302003451, 553661927, 721434082,
                1057243351, 1091258855, 1241596159, 1443187454, 1577274101, 1661030641, 1778998516,
                1912823282, 1778408689, 1761631735, 1660966905, 1577080055, 1543525366, 1342196976,
                1107314147, 1040729564, 822819804, 671431398, 472198557, 87508223, 33554687, 4}, {0, 7,
                50331846, 117440767, 520106716, 570502356, 823147226, 1058028997, 1073760511, 1275087357,
                1426213619, 1526811625, 1577342192, 1577145067, 1577080047, 1526749433, 1526747381,
                1241535223, 1191202291, 1090538731, 1040207065, 788613839, 637618638, 520241862,
                137450433, 52183261, 135, 2}, {256, 0, 33554502, 67109118, 218109438, 521021880,
                672936886, 722481855, 956319220, 1073759986, 1124092653, 1258573548, 1191463915,
                1359104231, 1325615338, 1241729778, 1258572536, 1124158460, 1073759472, 1057047258,
                839142347, 671371460, 536890805, 285234623, 84814903, 35001865, 6, 0}, {256, 256, 0,
                33554628, 101326591, 470424546, 522002351, 622470831, 872430830, 905987317,
                1057114083, 1074284516, 1074350062, 1091191274, 1074414059, 1074479092,
                1074872316, 1057766648, 1007040750, 738671078, 671890634, 520568751, 486552457,
                100688081, 50353664, 8192, 256, 0}, {0, 0, 0, 5, 50332099, 100663501, 168693468,
                521345698, 553662192, 637548531, 822492899, 822951911, 1041251041, 924006382,
                957494501, 1007891436, 773796605, 773271290, 571551220, 554511586, 520232371,
                167987451, 100686049, 50371474, 33579008, 256, 256, 0}, {0, 0, 0, 0, 3,
                33554436, 67108869, 117440621, 369112830, 536884711, 537211863, 622083551,
                554579416, 571289304, 554577637, 537864927, 606876660, 522463474,
                521281506, 369565416, 117450748, 67144406, 33603685, 18437, 512, 0, 0,
                0}, {0, 0, 0, 0, 0, 0, 33554432, 50339372, 67131647, 117467391,
                318790387, 486552540, 503929321, 503855306, 503853781, 504115426,
                503975658, 335743222, 117442814, 83886335, 50354625, 33588003, 1280,
                512, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 256, 33571075, 50359043,
                67144013, 83903336, 100669130, 117445886, 117440766, 100663550,
                83886335, 67109119, 50331841, 33562434, 257, 256, 512, 512, 0, 0,
                0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 256, 33586975, 33554560,
                50331902, 50331902, 33554624, 41893762, 2097220, 2, 0, 0, 0,
                0, 0, 0, 0, 0, 0},

        };
    }

    /**
     * 清除画布
     */
    public final void clearImage(BufferedImage image) {
        if (image == null) {
            return;
        }
        for (int x = 0; x < image.getWidth(); x++) {
            for (int y = 0; y < image.getHeight(); y++) {
                image.setRGB(x, y, 0);
            }
        }
    }
}
